#ASSIGNMENT-SQL

---Views, Sub Queries
1.What is a SQL view?
A SQL view is a virtual table that is based on the result of a SQL query. It provides a way to simplify complex queries, encapsulate complex joins and aggregations, and provide a more secure and user-friendly way to access data.

2.What is the difference between a view and a table?
A table is a physical storage of data, while a view is a virtual representation of data derived from one or more tables. Views do not store data themselves but provide a way to query and present data.

3.What is the difference between a subquery and a join?
A subquery is a query nested inside another query, while a join combines rows from two or more tables based on related columns. Joins are often used to combine data from multiple tables, while subqueries can be used for more complex filtering and calculations.

4.Discuss the potential security benefits of using views in a database.
Restricted Access: Views can be used to present only specific columns of a table, hiding sensitive or irrelevant information. This allows for more granular control over what users can see and access.

Row-Level Security: By applying filters in a view, you can restrict access to only certain rows of a table based on user roles or permissions. 

Encapsulation: Views can encapsulate complex queries and calculations, preventing users from directly querying or modifying the underlying tables. This can help protect against accidental or unauthorized data changes.

5.When would you prefer a subquery over a join, and why?
Filtering Based on Aggregate Results: When you need to filter results based on aggregate values or calculations, a subquery can be useful. For example, you might use a subquery to find all employees who earn more than the average salary:

SELECT EmployeeID, Name
FROM Employees
WHERE Salary > (SELECT AVG(Salary) FROM Employees);

Nested Queries: Subqueries can be useful for querying results that depend on complex conditions or multiple levels of filtering, where joins might become too complex or less readable.

----Aggregate Function, SQL Joins
1.What is the difference between COUNT(*) and COUNT(column_name)?

Answer:
COUNT(*) counts the total number of rows in a table, including rows with NULL values in the specified column.
COUNT(column_name) counts the number of non-NULL values in a specific column.

2.Can you use an aggregate function in a WHERE clause?

Answer: No, aggregate functions cannot be used directly in a WHERE clause. They are used in the HAVING clause to filter groups after the GROUP BY operation.

3.What is the purpose of the GROUP BY clause?

Answer: The GROUP BY clause is used to group rows that have the same values into summary rows. It's often used with aggregate functions to perform calculations on grouped data.   


4.What is the difference between INNER JOIN and OUTER JOIN?

An INNER JOIN returns rows that have matching values in both tables.
An OUTER JOIN returns all rows from one table, and the matched rows from the other table. There are two types of OUTER JOINs:
LEFT JOIN: Returns all rows from the left table, even if there are no matches in the right table.
RIGHT JOIN: Returns all rows from the right table, even if there are no matches in the left table.   

5.What is the difference between a CROSS JOIN and an INNER JOIN?

A CROSS JOIN returns the Cartesian product of two tables, combining every row from one table with every row from the other.   
An INNER JOIN returns only the rows that have matching values in both tables based on the join condition.