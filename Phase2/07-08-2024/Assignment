AdminUserModel.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.RightsManagement;
using System.Text;
using System.Threading.Tasks;

namespace LoginProject
{
    public class AdminUserModel

    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
    
}
-----------------------------------------------------------------------------------------------------------------------------
AdminUserRepo.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LoginProject
{
    internal class AdminUserRepo : IUserRepo
    {

        private readonly List<AdminUserModel> Users = new List<AdminUserModel>
    {
        new AdminUserModel { Username = "aaryaka", Password ="1234" },
        new AdminUserModel { Username = "gopika", Password = "1234" },
        new AdminUserModel { Username = "girish", Password = "1234" }
    };

        public AdminUserModel ReadByUserName(string username)
        {
            return Users.FirstOrDefault(user => user.Username == username);
        }

    }
}
---------------------------------------------------------------------------------------------------------------------------
LoginPage.xaml

<Window x:Class="LoginProject.LoginPage"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:LoginProject"
        mc:Ignorable="d"
        Title="LoginPage" Height="450" Width="800">
    <Canvas>
        <TextBlock x:Name="lblUsername" HorizontalAlignment="Left" Margin="255,129,0,0" TextWrapping="Wrap" Text="Username" VerticalAlignment="Top" />
        <TextBox x:Name="txtUsername" HorizontalAlignment="Left" Margin="400,127,0,0" TextWrapping="Wrap"  VerticalAlignment="Top" Width="120" Text="{Binding User.Username}"/>
        <TextBlock x:Name="lblPassword" HorizontalAlignment="Left" Margin="255,201,0,0" TextWrapping="Wrap" Text="Password" VerticalAlignment="Top"/>
        <TextBox x:Name="txtPassword" HorizontalAlignment="Left" Margin="400,199,0,0" TextWrapping="Wrap"  VerticalAlignment="Top" Width="120" Text="{Binding User.Password}"/>
        <Button x:Name="btnLogin" Content="Login" HorizontalAlignment="Left" Margin="360,294,0,0" VerticalAlignment="Top" Command="{Binding LoginCommand}"/>

    </Canvas>
</Window>
----------------------------------------------------------------------------------------------------------------------------
LoginPage.xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace LoginProject
{
    /// <summary>
    /// Interaction logic for LoginPage.xaml
    /// </summary>
    public partial class LoginPage : Window
    {
        public LoginPage()
        {
            InitializeComponent();
            DataContext = new UserViewModel();
        }
    }
}
----------------------------------------------------------------------------------------------------------------------------
RelayCommand.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;

namespace LoginProject
{
    public class RelayCommand : ICommand
    {
        private readonly Action _execute;
        private readonly Func<bool> _canExecute;

        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }
        //

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }
        //
        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute();
        }

        public void Execute(object parameter)
        {
            _execute();
        }
    }
}
----------------------------------------------------------------------------------------------------------------------------
UserViewModel.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows;
using System.ComponentModel;

namespace LoginProject
{
    public class UserViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        public void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        private IUserRepo _repo = new AdminUserRepo();
        public ICommand LoginCommand { get; }
        public AdminUserModel User { get; set; } = new AdminUserModel();

        public UserViewModel()
        {
            _repo = new AdminUserRepo();
            LoginCommand = new RelayCommand(OnLogin);
        }

        private void OnLogin()
        {
            var loginUser = _repo.ReadByUserName(User.Username);

            if (!(loginUser != null && loginUser.Password.Equals(User.Password)))
            {
                MessageBox.Show("Invalid username/password", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            MessageBox.Show("Login successful!", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
        }

    }
}
