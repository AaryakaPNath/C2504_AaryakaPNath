PHASE2 - ASSESSMENT

 

MINI-CASE STUDY - BANK PROJECT

 

AccountConfig.cs

using System;

using System.Collections.Generic;

using System.Linq;

using System.Text;

using System.Threading.Tasks;

using System.Windows;

 

namespace BankProject

{

    public static class AccountConfig

    {

        public static AddAccountWindow FrmAddAccount { get; set; }

        public static EditAccountWindow FrmEditAccount { get; set; }

        public static AccountViewModel VueModel { get; set; }

        static AccountConfig()

        {

            VueModel = new AccountViewModel();

            FrmAddAccount = new AddAccountWindow();

            FrmEditAccount = new EditAccountWindow();

        }

    }

}

---------------------------------------------------------------------------------------------------------------------------------

AccountManagementWindow.xaml

 

<Window x:Class="BankProject.AccountManagementWindow"

        xmlns=http://schemas.microsoft.com/winfx/2006/xaml/presentation

        xmlns:x=http://schemas.microsoft.com/winfx/2006/xaml

        xmlns:d=http://schemas.microsoft.com/expression/blend/2008

        xmlns:mc=http://schemas.openxmlformats.org/markup-compatibility/2006

        xmlns:local="clr-namespace:BankProject"

        mc:Ignorable="d"

        Title="AccountManagementWindow" Height="450" Width="800" Closed="Window_Closed">

    <Canvas>

        <Button x:Name="btnAdd" Content="Add" Canvas.Left="168" Canvas.Top="254" HorizontalAlignment="Left" Height="50" VerticalAlignment="Center" Width="100" Click="btnAdd_Click"/>

 

        <Button x:Name="btnEdit" Content="Edit" Canvas.Left="358" Canvas.Top="254" Height="50" Width="90" HorizontalAlignment="Left" VerticalAlignment="Center" Click="btnEdit_Click"/>

        <DataGrid x:Name="grdAccount" Height="179" Width="705" HorizontalAlignment="Center" VerticalAlignment="Top" AutoGenerateColumns="False" SelectionMode="Single" IsReadOnly="False" Canvas.Left="50" ItemsSource="{Binding Accounts}" Canvas.Top="10" SelectedItem="{Binding SelectedAccount ,Mode=TwoWay}">

            <DataGrid.Columns>

                <DataGridTextColumn Header="Account No." Binding="{Binding AccNo}"/>

                <DataGridTextColumn Header="Name" Binding="{Binding Name}"/>

                <DataGridTextColumn Header="Account Type" Binding="{Binding AccType}"/>

                <DataGridTextColumn Header="Email"  Binding="{Binding Email}"/>

                <DataGridTextColumn Header="Phone No." Binding="{Binding PhNo}"/>

                <DataGridTextColumn Header="Address" Binding="{Binding Address}"/>

 

            </DataGrid.Columns>

        </DataGrid>

        <Button x:Name="btnDelete" Content="Delete" Canvas.Left="525" Canvas.Top="254" Height="50" Width="90" Click="btnDelete_Click" HorizontalAlignment="Left" VerticalAlignment="Top" Command="{Binding DeleteCommand}"/>

 

    </Canvas>

</Window>

---------------------------------------------------------------------------------------------------------------------------------

using System;

using System.Collections.Generic;

using System.Linq;

using System.Text;

using System.Threading.Tasks;

using System.Windows;

using System.Windows.Controls;

using System.Windows.Data;

using System.Windows.Documents;

using System.Windows.Input;

using System.Windows.Media;

using System.Windows.Media.Imaging;

using System.Windows.Shapes;

 

namespace BankProject

{

    /// <summary>

    /// Interaction logic for AccountManagementWindow.xaml

    /// </summary>

    public partial class AccountManagementWindow : Window

    {

        public AccountManagementWindow()

        {

            InitializeComponent();

            this.DataContext = AccountConfig.VueModel;

        }

 

      

        private void btnAdd_Click(object sender, RoutedEventArgs e)

        {

            AccountConfig.FrmAddAccount.Show();

        }

 

        private void btnEdit_Click(object sender, RoutedEventArgs e)

        {

            if (grdAccount.SelectedIndex == -1)

            {

                var result = MessageBox.Show(messageBoxText: "Please select account to edit",

                    caption: "Alert",

                    button: MessageBoxButton.OK,

                    icon: MessageBoxImage.Information);

                return;

            }

            AccountConfig.FrmEditAccount.Show();

            //EditAccountWindow editAccountWindow = (EditAccountWindow)AccountConfig.EditAccountWindow;

            //AccountConfig.accountViewModel.EditWindowClose = editAccountWindow.WindowClose;

        }

 

        private void Window_Closed(object sender, EventArgs e)

        {

            Application.Current.Shutdown();

        }

 

        private void btnDelete_Click(object sender, RoutedEventArgs e)

        {

            if (grdAccount.SelectedIndex == -1)

            {

                var result = MessageBox.Show(messageBoxText: "Please select account to delete",

                    caption: "Alert",

                    button: MessageBoxButton.OK,

                    icon: MessageBoxImage.Information);

                return;

            }

            AccountViewModel viewModel = new AccountViewModel();

            viewModel.Delete();

        }

       

    }

}

---------------------------------------------------------------------------------------------------------------------------------

AccountManagementWindow.xaml.cs

using System;

using System.Collections.Generic;

using System.Linq;

using System.Text;

using System.Threading.Tasks;

using System.Windows;

using System.Windows.Controls;

using System.Windows.Data;

using System.Windows.Documents;

using System.Windows.Input;

using System.Windows.Media;

using System.Windows.Media.Imaging;

using System.Windows.Shapes;

 

namespace BankProject

{

    /// <summary>

    /// Interaction logic for AccountManagementWindow.xaml

    /// </summary>

    public partial class AccountManagementWindow : Window

    {

        public AccountManagementWindow()

        {

            InitializeComponent();

            this.DataContext = AccountConfig.VueModel;

        }

 

      

        private void btnAdd_Click(object sender, RoutedEventArgs e)

        {

            AccountConfig.FrmAddAccount.Show();

        }

 

        private void btnEdit_Click(object sender, RoutedEventArgs e)

        {

            if (grdAccount.SelectedIndex == -1)

            {

                var result = MessageBox.Show(messageBoxText: "Please select account to edit",

                    caption: "Alert",

                    button: MessageBoxButton.OK,

                    icon: MessageBoxImage.Information);

                return;

            }

            AccountConfig.FrmEditAccount.Show();

            //EditAccountWindow editAccountWindow = (EditAccountWindow)AccountConfig.EditAccountWindow;

            //AccountConfig.accountViewModel.EditWindowClose = editAccountWindow.WindowClose;

        }

 

        private void Window_Closed(object sender, EventArgs e)

        {

            Application.Current.Shutdown();

        }

 

        private void btnDelete_Click(object sender, RoutedEventArgs e)

        {

            if (grdAccount.SelectedIndex == -1)

            {

                var result = MessageBox.Show(messageBoxText: "Please select account to delete",

                    caption: "Alert",

                    button: MessageBoxButton.OK,

                    icon: MessageBoxImage.Information);

                return;

            }

            AccountViewModel viewModel = new AccountViewModel();

            viewModel.Delete();

        }

       

    }

}

---------------------------------------------------------------------------------------------------------------------------------

AccountMemoryRepo.cs

using System;

using System.Collections.Generic;

using System.Collections.ObjectModel;

using System.Linq;

using System.Security.Principal;

using System.Text;

using System.Threading.Tasks;

 

namespace BankProject

{

    public class AccountMemoryRepo : IAccountRepo

    {

   

        public ObservableCollection<AccountModel> accounts = new ObservableCollection<AccountModel>()

        {

            new AccountModel

            {

                AccNo = 3132324,

                Name = "Minnu",

                Balance = 0,

                AccType = "savings",

                Email = minnu@gmail.com,

                PhNo = "5236526526",

                Address = "gdsagdhsgdhsg",

                IsActive = true,

                InterestPercentage = 0,

                TransactionCount = 0,

                LastTrasactionDate = DateTime.Now,

 

 

            },

            new AccountModel

            {

                 AccNo = 3132324,

                Name = "Ashna",

                Balance = 0,

                AccType = "current",

                Email = minnu@gmail.com,

                PhNo = "5236526526",

                Address = "gdsagdhsgdhsg",

                IsActive = true,

                InterestPercentage = 0,

                TransactionCount = 0,

                LastTrasactionDate= DateTime.Now,

 

 

            }

        };

        public void Create(AccountModel accModel)

        {

            accounts.Add(accModel);

        }

 

        public ObservableCollection<AccountModel> ReadAllAccount()

        {

            return accounts;

        }

 

        public void UpdateAccount(AccountModel accModel)

        {

            foreach (var ac in accounts)

            {

                if (ac.AccNo == accModel.AccNo)

                {

                    ac.Address = accModel.Address;

                }

            }

        }

        public void DeleteAccount(AccountModel accModel)

        {

            foreach (var ac in accounts)

            {

                if (ac.AccNo == accModel.AccNo)

                {

                    ac.Address = accModel.Address;

                }

            }

        }

    }

}

---------------------------------------------------------------------------------------------------------------------------------

AccountModel.cs

using System;

using System.Collections.Generic;

using System.Linq;

using System.Text;

using System.Threading.Tasks;

 

namespace BankProject

{

    public class AccountModel

    {

        public int AccNo { get; set; }

        public string Name { get; set; }

        public string AccType { get; set; }

        public double Balance {  get; set; }

        public string Email {  get; set; }

        public string PhNo {  get; set; }

        public string Address {  get; set; }

        public bool IsActive {  get; set; }

        public double InterestPercentage {  get; set; }

        public int TransactionCount {  get; set; }

        public DateTime LastTrasactionDate { get; set; }

    }

}

---------------------------------------------------------------------------------------------------------------------------------

AccountViewModel.cs

using System;

using System.Collections.Generic;

using System.Collections.ObjectModel;

using System.ComponentModel;

using System.Linq;

using System.Security.Principal;

using System.Text;

using System.Threading.Tasks;

using System.Windows;

using System.Windows.Input;

 

namespace BankProject

{

    public class AccountViewModel : INotifyPropertyChanged

 

    {

        public event PropertyChangedEventHandler PropertyChanged;

        public void OnPropertyChanged(string propertyName)

        {

            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));

        }

        private AccountModel _newAccount = null;

        public AccountModel NewAccount

        {

            get => _newAccount;

            set { _newAccount = value; OnPropertyChanged(nameof(NewAccount)); }

        }

        private AccountModel _selectedAccount = null;

        public AccountModel SelectedAccount

        {

            get => _selectedAccount;

            set { _selectedAccount = value; OnPropertyChanged(nameof(SelectedAccount)); }

        }

        private IAccountRepo _repo = new AccountMemoryRepo();

        public ObservableCollection<AccountModel> Accounts

        {

            get

            {

                return _repo.ReadAllAccount();

            }

        }

        public ICommand CreateCommand { get; }

        public ICommand UpdateCommand { get; }

        public ICommand DeleteCommand { get; }

        //private ObservableCollection<AccountModel> _accounts = null;

        //public ObservableCollection<AccountModel> Accounts

        //{

        //    get => _accounts;

        //    set { _accounts = value; OnPropertyChanged(nameof(Accounts)); }

        //}

        //

        public AccountViewModel()

        {

            this.NewAccount = new AccountModel

            {

                AccNo = 00000,

                Name = "",

                Balance = 0,

                AccType = "savings",

                Email = minnu@gmail.com,

                PhNo = "5236526526",

                Address = "gdsagdhsgdhsg",

                IsActive = true,

                InterestPercentage = 0,

                TransactionCount = 0,

                LastTrasactionDate = DateTime.Now,

 

 

            };

            CreateCommand = new RelayCommand(Create);

            UpdateCommand = new RelayCommand(Update);

            DeleteCommand = new RelayCommand(Delete);

        }

        public void Create()

        {

            AccountModel newAccount = new AccountModel

            {

                AccNo = NewAccount.AccNo,

                Name = NewAccount.Name,

                Balance = NewAccount.Balance,

                AccType = NewAccount.AccType,

                Email = NewAccount.Email,

                PhNo = NewAccount.PhNo,

                Address = NewAccount.Address,

                IsActive = NewAccount.IsActive,

                InterestPercentage = NewAccount.InterestPercentage,

                TransactionCount = NewAccount.TransactionCount,

                LastTrasactionDate = NewAccount.LastTrasactionDate

            };

            var result = MessageBox.Show(messageBoxText: "Are you sure to create?",

                    caption: "Confirm",

                    button: MessageBoxButton.YesNo,

                    icon: MessageBoxImage.Question);

            if (result != MessageBoxResult.Yes)

            {

                return;

            }

            _repo.Create(newAccount);

            this.NewAccount = new AccountModel { AccNo = 0, Name = "", Balance = 0, AccType = "", Email = "", PhNo = "", Address = "", IsActive = false, InterestPercentage = 0, TransactionCount = 0, LastTrasactionDate = DateTime.Now };

            //this.NewItenary.Id = 0;

            //..

            //this.NewItenary = NewItenary;

            result = MessageBox.Show(messageBoxText: "Created Successfully",

                    caption: "Alert",

                    button: MessageBoxButton.OK,

                    icon: MessageBoxImage.Information);

        }

     

        public void Update()

        {

            if (this.SelectedAccount == null)

            {

                return;

            }

 

            _repo.UpdateAccount(this.SelectedAccount);

            this.SelectedAccount = this.SelectedAccount;

            var result = MessageBox.Show(messageBoxText: "Updated Successfully",

                    caption: "Alert",

                    button: MessageBoxButton.OK,

                    icon: MessageBoxImage.Information);

 

            //if (EditWindowClose != null)

            //{

            //    EditWindowClose();

            //}

        }

        public void Delete()

        {

            if (this.SelectedAccount == null)

            {

                return;

            }

            this.Accounts.Remove(this.SelectedAccount);

            this.SelectedAccount = null;

        }

 

 

    }

}

---------------------------------------------------------------------------------------------------------------------------------

AddAccountWindow.xaml

<Window x:Class="BankProject.AddAccountWindow"

        xmlns=http://schemas.microsoft.com/winfx/2006/xaml/presentation

        xmlns:x=http://schemas.microsoft.com/winfx/2006/xaml

        xmlns:d=http://schemas.microsoft.com/expression/blend/2008

        xmlns:mc=http://schemas.openxmlformats.org/markup-compatibility/2006

        xmlns:local="clr-namespace:BankProject"

        mc:Ignorable="d"

        Title="AddAccountWindow" Height="600" Width="800" Closing="Window_Closing">

    <Canvas>

        <TextBlock x:Name="lblAccountNo" HorizontalAlignment="Left" Margin="225,59,0,0" TextWrapping="Wrap" Text="Account No." VerticalAlignment="Top" FontSize="14"/>

        <TextBox x:Name="txtAccountNo" HorizontalAlignment="Left" Margin="420,58,0,0" TextWrapping="Wrap" Text="{Binding NewAccount.AccNo}" VerticalAlignment="Top" Width="160" FontSize="14"/>

        <TextBlock x:Name="lblName" HorizontalAlignment="Left" Margin="225,115,0,0" TextWrapping="Wrap" Text="Name" VerticalAlignment="Top" FontSize="14"/>

        <TextBox x:Name="txtName" HorizontalAlignment="Left" Margin="420,114,0,0" TextWrapping="Wrap" Text="{Binding NewAccount.Name}" VerticalAlignment="Top" Width="160" FontSize="14"/>

        <TextBlock x:Name="lblAccountType" HorizontalAlignment="Left" Margin="225,169,0,0" TextWrapping="Wrap" Text="Account Type" VerticalAlignment="Top" FontSize="14"/>

        <TextBlock x:Name="lblEmail" HorizontalAlignment="Left" Margin="225,217,0,0" TextWrapping="Wrap" Text="Email" VerticalAlignment="Top" FontSize="14"/>

        <TextBox x:Name="txtEmail" HorizontalAlignment="Left" Margin="420,216,0,0" TextWrapping="Wrap" Text="{Binding NewAccount.Email}" VerticalAlignment="Top" Width="160" FontSize="14"/>

        <TextBlock x:Name="lblAddress" HorizontalAlignment="Left" Margin="225,270,0,0" TextWrapping="Wrap" Text="Address" VerticalAlignment="Top" FontSize="14"/>

        <TextBox x:Name="txtAddress" HorizontalAlignment="Left" Margin="420,269,0,0" TextWrapping="Wrap" Text="{Binding NewAccount.Address}" VerticalAlignment="Top" Width="160" FontSize="14" AcceptsReturn="True"/>

        <TextBlock x:Name="lblPhoneNo" HorizontalAlignment="Left" Margin="225,330,0,0" TextWrapping="Wrap" Text="Phone No." VerticalAlignment="Top" FontSize="14"/>

        <TextBox x:Name="txtPhoneNo" HorizontalAlignment="Left" Margin="420,329,0,0" TextWrapping="Wrap" Text="{Binding NewAccount.PhNo}" VerticalAlignment="Top" Width="160" FontSize="14"/>

        <TextBlock x:Name="lblRate" HorizontalAlignment="Left" Margin="225,385,0,0" TextWrapping="Wrap" Text="Interest Rate" VerticalAlignment="Top" FontSize="14"/>

        <TextBlock x:Name="lblStatus" HorizontalAlignment="Left" Margin="225,439,0,0" TextWrapping="Wrap" Text="Status" VerticalAlignment="Top" FontSize="14"/>

        <RadioButton x:Name="rdSavings" Content="Savings" HorizontalAlignment="Left" Margin="420,169,0,0" VerticalAlignment="Top"/>

        <RadioButton x:Name="rdCurrent" Content="Current" HorizontalAlignment="Left" Margin="516,169,0,0" VerticalAlignment="Top"/>

        <ComboBox x:Name="cmbRate" HorizontalAlignment="Left" Margin="420,387,0,0" VerticalAlignment="Top" Width="120">

            <ComboBoxItem Content="1"/>

            <ComboBoxItem Content="2"/>

            <ComboBoxItem Content="3"/>

            <ComboBoxItem Content="4"/>

            <ComboBoxItem Content="5"/>

            <ComboBoxItem Content="6"/>

            <ComboBoxItem Content="7"/>

            <ComboBoxItem Content="8"/>

            <ComboBoxItem Content="9"/>

            <ComboBoxItem Content="10"/>

            <ComboBoxItem Content="11"/>

            <ComboBoxItem Content="12"/>

        </ComboBox>

        <CheckBox x:Name="chkActive" Content="Active" HorizontalAlignment="Left" Margin="423,446,0,0" VerticalAlignment="Top"/>

        <Button x:Name="btnCreateAccount" Content="Create Account" HorizontalAlignment="Left" Margin="410,494,0,0" VerticalAlignment="Top" Width="105" Height="35" FontSize="14" Command="{Binding CreateCommand}"/>

 

 

    </Canvas>

</Window>

----------------------------------------------------------------------------------------------------------------------------------AddAccountWindow.xaml.cs

using System;

using System.Collections.Generic;

using System.Linq;

using System.Text;

using System.Threading.Tasks;

using System.Windows;

using System.Windows.Controls;

using System.Windows.Data;

using System.Windows.Documents;

using System.Windows.Input;

using System.Windows.Media;

using System.Windows.Media.Imaging;

using System.Windows.Shapes;

 

namespace BankProject

{

    /// <summary>

    /// Interaction logic for AddAccountWindow.xaml

    /// </summary>

    public partial class AddAccountWindow : Window

    {

        public AddAccountWindow()

        {

            InitializeComponent();

            this.DataContext = AccountConfig.VueModel;

        }

 

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)

        {

            e.Cancel = true;

            this.Hide();

        }

    }

}

---------------------------------------------------------------------------------------------------------------------------------

App.xaml

<Application x:Class="BankProject.App"

             xmlns=http://schemas.microsoft.com/winfx/2006/xaml/presentation

             xmlns:x=http://schemas.microsoft.com/winfx/2006/xaml

             xmlns:local="clr-namespace:BankProject"

             StartupUri="AccountManagementWindow.xaml">

    <Application.Resources>

        

    </Application.Resources>

</Application>

--------------------------------------------------------------------------------------------------------------------------------

EditAccountWindow.xaml

<Window x:Class="BankProject.EditAccountWindow"

        xmlns=http://schemas.microsoft.com/winfx/2006/xaml/presentation

        xmlns:x=http://schemas.microsoft.com/winfx/2006/xaml

        xmlns:d=http://schemas.microsoft.com/expression/blend/2008

        xmlns:mc=http://schemas.openxmlformats.org/markup-compatibility/2006

        xmlns:local="clr-namespace:BankProject"

        mc:Ignorable="d"

        Title="EditAccountWindow" Height="600" Width="800" Closing="Window_Closing">

    <Canvas>

        <TextBlock x:Name="lblAccountNo" HorizontalAlignment="Left" Margin="225,59,0,0" TextWrapping="Wrap" Text="Account No." VerticalAlignment="Top" FontSize="14"/>

        <TextBox x:Name="txtAccountNo" HorizontalAlignment="Left" Margin="420,58,0,0" TextWrapping="Wrap" Text="TextBox" VerticalAlignment="Top" Width="160" FontSize="14" IsEnabled="False"/>

        <TextBlock x:Name="lblName" HorizontalAlignment="Left" Margin="225,115,0,0" TextWrapping="Wrap" Text="Name" VerticalAlignment="Top" FontSize="14"/>

        <TextBox x:Name="txtName" HorizontalAlignment="Left" Margin="420,114,0,0" TextWrapping="Wrap" Text="TextBox" VerticalAlignment="Top" Width="160" FontSize="14" IsEnabled="False"/>

        <TextBlock x:Name="lblAccountType" HorizontalAlignment="Left" Margin="225,169,0,0" TextWrapping="Wrap" Text="Account Type" VerticalAlignment="Top" FontSize="14"/>

        <TextBlock x:Name="lblEmail" HorizontalAlignment="Left" Margin="225,217,0,0" TextWrapping="Wrap" Text="Email" VerticalAlignment="Top" FontSize="14"/>

        <TextBox x:Name="txtEmail" HorizontalAlignment="Left" Margin="420,216,0,0" TextWrapping="Wrap" Text="TextBox" VerticalAlignment="Top" Width="160" FontSize="14" IsEnabled="False"/>

        <TextBlock x:Name="lblAddress" HorizontalAlignment="Left" Margin="225,270,0,0" TextWrapping="Wrap" Text="Address" VerticalAlignment="Top" FontSize="14"/>

        <TextBox x:Name="txtAddress" HorizontalAlignment="Left" Margin="420,269,0,0" TextWrapping="Wrap" Text="{Binding SelectedAccount.Address}" VerticalAlignment="Top" Width="160" FontSize="14" AcceptsReturn="True"/>

        <TextBlock x:Name="lblPhoneNo" HorizontalAlignment="Left" Margin="225,330,0,0" TextWrapping="Wrap" Text="Phone No." VerticalAlignment="Top" FontSize="14"/>

        <TextBox x:Name="txtPhoneNo" HorizontalAlignment="Left" Margin="420,329,0,0" TextWrapping="Wrap" Text="TextBox" VerticalAlignment="Top" Width="160" FontSize="14" IsEnabled="False"/>

        <TextBlock x:Name="lblInterestRate" HorizontalAlignment="Left" Margin="225,385,0,0" TextWrapping="Wrap" Text="Interest Rate" VerticalAlignment="Top" FontSize="14"/>

        <TextBlock x:Name="lblStatus" HorizontalAlignment="Left" Margin="225,439,0,0" TextWrapping="Wrap" Text="Status" VerticalAlignment="Top" FontSize="14"/>

        <RadioButton x:Name="rdSavings" Content="Savings" HorizontalAlignment="Left" Margin="420,169,0,0" VerticalAlignment="Top" IsEnabled="False"/>

        <RadioButton x:Name="rdCurrent" Content="Current" HorizontalAlignment="Left" Margin="516,169,0,0" VerticalAlignment="Top" IsEnabled="False"/>

        <ComboBox x:Name="cmbRate" HorizontalAlignment="Left" Margin="420,387,0,0" VerticalAlignment="Top" Width="120" IsEnabled="False">

            <ComboBoxItem Content="1"/>

            <ComboBoxItem Content="2"/>

            <ComboBoxItem Content="3"/>

            <ComboBoxItem Content="4"/>

            <ComboBoxItem Content="5"/>

            <ComboBoxItem Content="6"/>

            <ComboBoxItem Content="7"/>

            <ComboBoxItem Content="8"/>

            <ComboBoxItem Content="9"/>

            <ComboBoxItem Content="10"/>

            <ComboBoxItem Content="11"/>

            <ComboBoxItem Content="12"/>

        </ComboBox>

        <CheckBox x:Name="chkActive" Content="Active" HorizontalAlignment="Left" Margin="423,446,0,0" VerticalAlignment="Top" IsEnabled="False"/>

        <Button x:Name="btnEditAccount" Content="Update" HorizontalAlignment="Left" Margin="410,494,0,0" VerticalAlignment="Top" Width="105" Height="35" FontSize="14" Command="{Binding UpdateCommand}"/>

 

 

    </Canvas>

</Window>

---------------------------------------------------------------------------------------------------------------------------------EditAccountWindow.xaml.cs

 

using System;

using System.Collections.Generic;

using System.Linq;

using System.Text;

using System.Threading.Tasks;

using System.Windows;

using System.Windows.Controls;

using System.Windows.Data;

using System.Windows.Documents;

using System.Windows.Input;

using System.Windows.Media;

using System.Windows.Media.Imaging;

using System.Windows.Shapes;

 

namespace BankProject

{

    /// <summary>

    /// Interaction logic for EditAccountWindow.xaml

    /// </summary>

    public partial class EditAccountWindow : Window

    {

        public EditAccountWindow()

        {

            InitializeComponent();

            this.DataContext = AccountConfig.VueModel;

        }

 

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)

        {

            e.Cancel = true;

            this.Hide();

        }

    }

}

---------------------------------------------------------------------------------------------------------------------------------

IAccountRepo.cs

 

using System;

using System.Collections.Generic;

using System.Collections.ObjectModel;

using System.Linq;

using System.Security.Principal;

using System.Text;

using System.Threading.Tasks;

 

namespace BankProject

{

    public interface IAccountRepo

    {

 

        void Create(AccountModel accountModel);

        void UpdateAccount(AccountModel accountModel);

        void DeleteAccount(AccountModel accountModel);

        //void Deposit(int acNo, int Amount);

        //void Withdrw(int acNo, int Amount);

        //void CalculateInterestAndUpdateBalance();

        ObservableCollection<AccountModel> ReadAllAccount();

    }

}

---------------------------------------------------------------------------------------------------------------------------------RelayCommand.cs

 

using System;

using System.Collections.Generic;

using System.Linq;

using System.Text;

using System.Threading.Tasks;

using System.Windows.Input;

 

namespace BankProject

{

    public class RelayCommand : ICommand

    {

        private readonly Action _execute;

        private readonly Func<bool> _canExecute;

 

        public RelayCommand(Action execute, Func<bool> canExecute = null)

        {

            _execute = execute ?? throw new ArgumentNullException(nameof(execute));

            _canExecute = canExecute;

        }

        //

 

        public event EventHandler CanExecuteChanged

        {

            add { CommandManager.RequerySuggested += value; }

            remove { CommandManager.RequerySuggested -= value; }

        }

        //

        public bool CanExecute(object parameter)

        {

            return _canExecute == null || _canExecute();

        }

 

        public void Execute(object parameter)

        {

            _execute();

        }

    }

}
---------------------------------------------------------------------------------------------------------------------------------