Q1
For rational number of numerator and denominator like p/q 
Implement
1.Subtract

class MyUtil
    {
        public static int FindGCD(int a, int b) //GCD
        {
            while (a != b)
            {
                if (a > b)
                    a -= b;
                else
                    b -= a;
            }
            return a;
        }
    }
    class RationalNumber
    {
        public int Numerator { get; set; }
        private int denominator;
        public int Denominator
        {
            get
            {
                return denominator;
            }
            set
            {
                if (denominator == 0)
                {
                    denominator = 1;
                }
                denominator = value;
            }
        }

        public RationalNumber(int _numerator, int _denominator)
        {
            // throw ERR this.Denominator = 0
            if (_denominator == 0)
            {
                _denominator = 1;
            }
            this.Numerator = _numerator;
            this.Denominator = _denominator;
        }
        public RationalNumber Sub(RationalNumber other)
        {
            RationalNumber diff = new RationalNumber(0, 0);
            diff.Numerator = (this.Numerator * other.Denominator) - (other.Numerator * this.Denominator);
            diff.Denominator = this.Denominator * other.Denominator;

            int gcd = MyUtil.FindGCD(diff.Numerator, diff.Denominator);
            diff.Numerator = diff.Numerator / gcd;
            diff.Denominator = diff.Denominator / gcd;
            return diff;
        }

        public override string ToString()
        {
            return $"[{Numerator} / {Denominator}]";
        }

    }
    internal class Program
    {
        static void Main(string[] args)
        {
            RationalNumber firstNo = new RationalNumber(1, 2);
            RationalNumber secondNo = new RationalNumber(1, 4);
            RationalNumber result = firstNo.Sub(secondNo);
            Console.WriteLine($"{firstNo} - {secondNo} = {result}");

        }
    }
----------------------------------------------------------------------------------------------------------------------------------
2.Multiply 
class MyUtil
    {
        public static int FindGCD(int a, int b) //GCD
        {
            while (a != b)
            {
                if (a > b)
                    a -= b;
                else
                    b -= a;
            }
            return a;
        }
    }
    class RationalNumber
    {
        public int Numerator { get; set; }
        private int denominator;
        public int Denominator
        {
            get
            {
                return denominator;
            }
            set
            {
                if (denominator == 0)
                {
                    denominator = 1;
                }
                denominator = value;
            }
        }

        public RationalNumber(int _numerator, int _denominator)
        {
            // throw ERR this.Denominator = 0
            if (_denominator == 0)
            {
                _denominator = 1;
            }
            this.Numerator = _numerator;
            this.Denominator = _denominator;
        }
        public RationalNumber Mul(RationalNumber other)
        {
            RationalNumber diff = new RationalNumber(0, 0);
            diff.Numerator = this.Numerator * other.Numerator;
            diff.Denominator = this.Denominator * other.Denominator;

            int gcd = MyUtil.FindGCD(diff.Numerator, diff.Denominator);
            diff.Numerator = diff.Numerator / gcd;
            diff.Denominator = diff.Denominator / gcd;
            return diff;
        }

        public override string ToString()
        {
            return $"[{Numerator} / {Denominator}]";
        }

    }
    internal class Program
    {
        static void Main(string[] args)
        {
            RationalNumber firstNo = new RationalNumber(1, 2);
            RationalNumber secondNo = new RationalNumber(1, 4);
            RationalNumber result = firstNo.Mul(secondNo);
            Console.WriteLine($"{firstNo} * {secondNo} = {result}");

        }
    }
---------------------------------------------------------------------------------------------------------------------------------
3.Divide 
class MyUtil
    {
        public static int FindGCD(int a, int b) //GCD
        {
            while (a != b)
            {
                if (a > b)
                    a -= b;
                else
                    b -= a;
            }
            return a;
        }
    }
    class RationalNumber
    {
        public int Numerator { get; set; }
        private int denominator;
        public int Denominator
        {
            get
            {
                return denominator;
            }
            set
            {
                if (denominator == 0)
                {
                    denominator = 1;
                }
                denominator = value;
            }
        }

        public RationalNumber(int _numerator, int _denominator)
        {
            // throw ERR this.Denominator = 0
            if (_denominator == 0)
            {
                _denominator = 1;
            }
            this.Numerator = _numerator;
            this.Denominator = _denominator;
        }
        public RationalNumber Div(RationalNumber other)
        {
            RationalNumber diff = new RationalNumber(0, 0);
            diff.Numerator = this.Numerator * other.Denominator;
            diff.Denominator = this.Denominator * other.Numerator;

            int gcd = MyUtil.FindGCD(diff.Numerator, diff.Denominator);
            diff.Numerator = diff.Numerator / gcd;
            diff.Denominator = diff.Denominator / gcd;
            return diff;
        }

        public override string ToString()
        {
            return $"[{Numerator} / {Denominator}]";
        }

    }
    internal class Program
    {
        static void Main(string[] args)
        {
            RationalNumber firstNo = new RationalNumber(1, 2);
            RationalNumber secondNo = new RationalNumber(1, 4);
            RationalNumber result = firstNo.Div(secondNo);
            Console.WriteLine($"{firstNo} / {secondNo} = {result}");

        }
    }
----------------------------------------------------------------------------------------------------------------------------------
4.Eq 
using System;

class RationalNumber
{
    public int Numerator { get; set; }
    private int denominator;
    public int Denominator
    {
        get
        {
            return denominator;
        }
        set
        {
            if (denominator == 0)
            {
                denominator = 1;
            }
            denominator = value;
        }
    }

    public RationalNumber(int _numerator, int _denominator)
    {
        // throw ERR this.Denominator = 0
        if (_denominator == 0)
        {
            _denominator = 1;
        }
        this.Numerator = _numerator;
        this.Denominator = _denominator;
    }
    public bool IsEqual(RationalNumber other)
    {
        return this.Numerator == other.Numerator && this.Denominator == other.Denominator;
    }

    public override string ToString()
    {
        return $"[{Numerator} / {Denominator}]";
    }

}
internal class Program
{
    static void Main(string[] args)
    {
        RationalNumber firstNo = new RationalNumber(3, 4);
        RationalNumber secondNo = new RationalNumber(3, 4);

        if (firstNo.IsEqual(secondNo))
        {
            Console.WriteLine($"Rational number 1: {firstNo} is equal to Rational number 2 : {secondNo}");
        }
        else
        {
            Console.WriteLine($"Rational number 1 : {firstNo} is not equal to Rational number 2 :  {secondNo}");
        }
    }
}
----------------------------------------------------------------------------------------------------------------------------------
5.Gt 
using System;


class RationalNumber
{
    public int Numerator { get; set; }
    private int denominator;
    public int Denominator
    {
        get
        {
            return denominator;
        }
        set
        {
            if (denominator == 0)
            {
                denominator = 1;
            }
            denominator = value;
        }
    }

    public RationalNumber(int _numerator, int _denominator)
    {
        // throw ERR this.Denominator = 0
        if (_denominator == 0)
        {
            _denominator = 1;
        }
        this.Numerator = _numerator;
        this.Denominator = _denominator;
    }
    public bool IsGreater(RationalNumber other)
    {
        return this.Numerator * other.Denominator > other.Numerator * this.Denominator;
    }

    public override string ToString()
    {
        return $"[{Numerator} / {Denominator}]";
    }

}
internal class Program
{
    static void Main(string[] args)
    {
        RationalNumber firstNo = new RationalNumber(3, 4);
        RationalNumber secondNo = new RationalNumber(2, 4);

        if (firstNo.IsGreater(secondNo))
        {
            Console.WriteLine($"Rational number 1 : {firstNo} is greater than Rational number 2 : {secondNo}");
        }
        else
        {
            Console.WriteLine($"Rational number 1 : {firstNo} is not greater than Rational number 2 :  {secondNo}");
        }

    }
}
----------------------------------------------------------------------------------------------------------------------------------
6.Ne 
    using System;


class RationalNumber
{
    public int Numerator { get; set; }
    private int denominator;
    public int Denominator
    {
        get
        {
            return denominator;
        }
        set
        {
            if (denominator == 0)
            {
                denominator = 1;
            }
            denominator = value;
        }
    }

    public RationalNumber(int _numerator, int _denominator)
    {
        // throw ERR this.Denominator = 0
        if (_denominator == 0)
        {
            _denominator = 1;
        }
        this.Numerator = _numerator;
        this.Denominator = _denominator;
    }
    public bool IsNotEquals(RationalNumber other)
    {
        return this.Numerator * other.Denominator != other.Numerator * this.Denominator;
    }

    public override string ToString()
    {
        return $"[{Numerator} / {Denominator}]";
    }

}
internal class Program
{
    static void Main(string[] args)
    {
        RationalNumber firstNo = new RationalNumber(3, 4);
        RationalNumber secondNo = new RationalNumber(2, 4);

        if (firstNo.IsNotEquals(secondNo))
        {
            Console.WriteLine($"Rational number 1 : {firstNo} is not equual to Rational number 2 : {secondNo}");
        }
        else
        {
            Console.WriteLine($"Rational number 1 : {firstNo} is  equals Rational number 2 :  {secondNo}");
        }

    }
}

----------------------------------------------------------------------------------------------------------------------------------
7.Gte 
    class RationalNumber
    {
        public int Numerator { get; set; }
        private int denominator;
        public int Denominator
        {
            get
            {
                return denominator;
            }
            set
            {
                if (denominator == 0)
                {
                    denominator = 1;
                }
                denominator = value;
            }
        }

        public RationalNumber(int _numerator, int _denominator)
        {
            // throw ERR this.Denominator = 0
            if (_denominator == 0)
            {
                _denominator = 1;
            }
            this.Numerator = _numerator;
            this.Denominator = _denominator;
        }
         public bool IsGreaterOrEqual(RationalNumber other)
         {
             return (Numerator * other.Denominator) >= (other.Numerator * Denominator);
         }

        public override string ToString()
        {
            return $"[{Numerator} / {Denominator}]";
        }

    }
    internal class Program
    {
        static void Main(string[] args)
        {
            RationalNumber firstNo = new RationalNumber(3, 4);
            RationalNumber secondNo = new RationalNumber(2, 4);

            if (firstNo.IsGreaterOrEqual(secondNo))
            {
                Console.WriteLine($"Rational number 1 {firstNo} is greater than or equal to Rational number 2 {secondNo}");
            }
            else
            {
                Console.WriteLine($"Rational number 1 {firstNo} is less than  Rational number 2 {secondNo}");
            }

        }
    }

----------------------------------------------------------------------------------------------------------------------------------
8.Lt 
class RationalNumber
    {
        public int Numerator { get; set; }
        private int denominator;
        public int Denominator
        {
            get
            {
                return denominator;
            }
            set
            {
                if (denominator == 0)
                {
                    denominator = 1;
                }
                denominator = value;
            }
        }

        public RationalNumber(int _numerator, int _denominator)
        {
            // throw ERR this.Denominator = 0
            if (_denominator == 0)
            {
                _denominator = 1;
            }
            this.Numerator = _numerator;
            this.Denominator = _denominator;
        }
         public bool IsGreaterOrEqual(RationalNumber other)
         {
             return (Numerator * other.Denominator) < (other.Numerator * Denominator);
         }

        public override string ToString()
        {
            return $"[{Numerator} / {Denominator}]";
        }

    }
    internal class Program
    {
        static void Main(string[] args)
        {
            RationalNumber firstNo = new RationalNumber(3, 4);
            RationalNumber secondNo = new RationalNumber(2, 4);

            if (firstNo.IsGreaterOrEqual(secondNo))
            {
                Console.WriteLine($"Rational number 1 {firstNo} is less than  Rational number 2 {secondNo}");
            }
            else
            {
                Console.WriteLine($"Rational number 1 {firstNo} is  greater than Rational number 2 {secondNo}");
            }

        }
    }
----------------------------------------------------------------------------------------------------------------------------------
9.Lte 
    class RationalNumber
    {
        public int Numerator { get; set; }
        private int denominator;
        public int Denominator
        {
            get
            {
                return denominator;
            }
            set
            {
                if (denominator == 0)
                {
                    denominator = 1;
                }
                denominator = value;
            }
        }

        public RationalNumber(int _numerator, int _denominator)
        {
            // throw ERR this.Denominator = 0
            if (_denominator == 0)
            {
                _denominator = 1;
            }
            this.Numerator = _numerator;
            this.Denominator = _denominator;
        }
         public bool IsGreaterOrEqual(RationalNumber other)
         {
             return (Numerator * other.Denominator) <= (other.Numerator * Denominator);
         }

        public override string ToString()
        {
            return $"[{Numerator} / {Denominator}]";
        }

    }
    internal class Program
    {
        static void Main(string[] args)
        {
            RationalNumber firstNo = new RationalNumber(3, 4);
            RationalNumber secondNo = new RationalNumber(2, 4);

            if (firstNo.IsGreaterOrEqual(secondNo))
            {
                Console.WriteLine($"Rational number 1 {firstNo} is less than or equal to Rational number 2 {secondNo}");
            }
            else
            {
                Console.WriteLine($"Rational number 1 {firstNo} is  greater than  Rational number 2 {secondNo}");
            }

        }
    }